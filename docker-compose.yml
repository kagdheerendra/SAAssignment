# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)
version: '3'

<<<<<<< HEAD
# Define services
services:
=======
volumes:
  postgres_data:
      driver: local
      
# Define services
services:
  postgres:
      image: postgres
      volumes:
        - postgres_data:/var/lib/postgresql/data
      environment:
        POSTGRES_DB: keycloak
        POSTGRES_USER: keycloak
        POSTGRES_PASSWORD: password
  keycloak:
      image: quay.io/keycloak/keycloak:21.0.2
      volumes:
         - ./keycloak-server/realm-export.json:/opt/keycloak/data/import/realm-export.json
      environment:
        DB_VENDOR: POSTGRES
        DB_ADDR: postgres
        DB_DATABASE: keycloak
        DB_USER: keycloak
        DB_SCHEMA: public
        DB_PASSWORD: password
        KEYCLOAK_USER: admin
        KEYCLOAK_PASSWORD: admin
        KEYCLOAK_ADMIN: admin
        KEYCLOAK_ADMIN_PASSWORD: admin
        KEYCLOAK_IMPORT: /opt/keycloak/data/import/realm-export.json -Dkeycloak.profile.feature.upload_scripts=enabled
      command: -v start-dev --http-port=8181 --import-realm
      ports:
        - 8181:8181
      depends_on:
        - postgres
      networks:
        - eureka-network  
>>>>>>> e61648a (fix: dockerize backend and frontend)
  # App backend eurekaserver service
  eureka-server:
    container_name: eureka-server
    # Configuration for building the docker image for the backend service
    build:
      context: e-microservice\e-serviceregistry # Use an image built from the specified dockerfile in the `spring-boot-oauth2-social-login` directory.
      dockerfile: Dockerfile
    ports:
      - "8761:8761" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    environment:
      - spring.application.name=eureka-server
      - eureka.client.registerWithEureka=false
      - eureka.client.fetchRegistry=false
      - eureka.server.waitTimeInMsWhenSyncEmpty=0
<<<<<<< HEAD
=======
      - eureka.instance.hostname= eureka-server
      - eureka.client.serviceUrl.defaultZone= http://eureka-server:8761/eureka      
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s      
    depends_on:
      - keycloak
>>>>>>> e61648a (fix: dockerize backend and frontend)
    networks:
      - eureka-network
  # App backend apigateway service
  api-gateway:
    container_name: api-gateway
    # Configuration for building the docker image for the backend service
    build:
      context: e-microservice\e-ApiGateway # Use an image built from the specified dockerfile in the `spring-boot-oauth2-social-login` directory.
      dockerfile: Dockerfile
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
<<<<<<< HEAD
    restart: always
=======
>>>>>>> e61648a (fix: dockerize backend and frontend)
    environment:
      - spring.application.name=api-gateway
      - eureka.instance.preferIpAddress=true
      - eureka.client.registerWithEureka=true
      - eureka.client.fetchRegistry=true
<<<<<<< HEAD
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka
=======
      - eureka.client.serviceUrl.defaultZone=http://eureka-server:8761/eureka
      - keycloakClient.serverUrl=http://keycloak:8181
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI=http://keycloak:8181/realms/ecommerce/protocol/openid-connect/certs
      - keycloakClient.realm=ecommerce
      - keycloak.clientId=e-gateway
    restart: always
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s   
>>>>>>> e61648a (fix: dockerize backend and frontend)
    networks:
      - eureka-network
    depends_on:
      - eureka-server
<<<<<<< HEAD

  # App backend productservice service
  product-service:
    container_name: product-service
=======
      - keycloak
    
  # App backend product service
  productservice:
    container_name: productservice
>>>>>>> e61648a (fix: dockerize backend and frontend)
    # Configuration for building the docker image for the backend service
    build:
      context: e-microservice\e-ProductService # Use an image built from the specified dockerfile in the `spring-boot-oauth2-social-login` directory.
      dockerfile: Dockerfile
    ports:
<<<<<<< HEAD
      - "9081:9081"
    environment:
      - spring.application.name=product-service
      - eureka.instance.preferIpAddress=true
      - eureka.client.registerWithEureka=true
      - eureka.client.fetchRegistry=true
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka
      - spring.datasource.url = jdbc:mysql://mysql:3306/emicroservices?allowPublicKeyRetrieval=true&useSSL=false&createDatabaseIfNotExist=true
      - spring.datasource.username = root
      - spring.datasource.password = root
      - spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect
      - spring.jpa.hibernate.ddl-auto = update      
    restart: always
    networks:
      - eureka-network
    depends_on:
      - eureka-server
      
=======
      - "9081:9081" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on:
      - eureka-server
      - keycloak
      - mysql
      - api-gateway
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.datasource.url"  : "jdbc:mysql://mysql:3306/emicroservices?allowPublicKeyRetrieval=true&useSSL=false&createDatabaseIfNotExist=true",
        "spring.datasource.username" : "root",
        "spring.datasource.password" : "root",
        "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.MySQL5InnoDBDialect",
        "spring.jpa.hibernate.ddl-auto" : "update",
        "spring.application.name" : "product-service",
        "eureka.instance.preferIpAddress" : "true",
        "eureka.client.registerWithEureka" : "true",
        "eureka.client.fetchRegistry" : "true",
        "eureka.client.serviceUrl.defaultZone": "http://eureka-server:8761/eureka",
        "keycloakClient.serverUrl" : "http://keycloak:8181",
        "SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI": "http://localhost:8181/realms/ecommerce/protocol/openid-connect/certs",
        "keycloakClient.realm" : "ecommerce",
        "keycloak.clientId" : "e-productservice"
    }'    
    healthcheck:
      test: "curl --fail --silent localhost:9081/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s       
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - eureka-network

  # App backend department service
  departmentservice:
    container_name: departmentservice
    # Configuration for building the docker image for the backend service
    build:
      context: e-microservice\e-DepartmentService # Use an image built from the specified dockerfile in the `spring-boot-oauth2-social-login` directory.
      dockerfile: Dockerfile
    ports:
      - "9082:9082" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on:
      - eureka-server
      - keycloak
      - mysql
      - api-gateway
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.datasource.url"  : "jdbc:mysql://mysql:3306/emicroservices?allowPublicKeyRetrieval=true&useSSL=false&createDatabaseIfNotExist=true",
        "spring.datasource.username" : "root",
        "spring.datasource.password" : "root",
        "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.MySQL5InnoDBDialect",
        "spring.jpa.hibernate.ddl-auto" : "update",
        "spring.application.name" : "department-service",
        "eureka.instance.preferIpAddress" : "true",
        "eureka.client.registerWithEureka" : "true",
        "eureka.client.fetchRegistry" : "true",
        "eureka.client.serviceUrl.defaultZone": "http://eureka-server:8761/eureka",
        "keycloakClient.serverUrl" : "http://keycloak:8181",
        "SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI": "http://localhost:8181/realms/ecommerce/protocol/openid-connect/certs",
        "keycloakClient.realm" : "ecommerce",
        "keycloak.clientId" : "e-departmentservice"
    }'    
    healthcheck:
      test: "curl --fail --silent localhost:9082/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s       
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - eureka-network

>>>>>>> e61648a (fix: dockerize backend and frontend)
  # Frontend Service 
  angular-app:
    container_name: angular-app
    build:
      context: angular-app # Use an image built from the specified dockerfile in the `angular-11-social-login` directory.
      dockerfile: Dockerfile
    ports:
      - "4200:80" # Map the exposed port 80 on the container to port 8081 on the host machine
<<<<<<< HEAD
    restart: always
    depends_on:
      - api-gateway
    networks:
      - frontend  
=======
    environment: 
      - KEYCLOAK_URL=http://keycloak:8181
      - KEYCLOAK_REALM=ecommerce
      - KEYCLOAK_CLIENT_ID=ecommerceui
    depends_on:
      - keycloak
    networks:
      - eureka-network
>>>>>>> e61648a (fix: dockerize backend and frontend)

  # Database Service (Mysql)
  mysql:
    container_name: mysql
    image: mysql:8.0
    ports:
      - "3307:3306"
<<<<<<< HEAD
    restart: always
=======
>>>>>>> e61648a (fix: dockerize backend and frontend)
    environment:
      - MYSQL_ROOT_PASSWORD=root
    networks:
      - eureka-network  
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot"]
      interval: 30s
      timeout: 10s
      retries: 3
<<<<<<< HEAD
  
=======
>>>>>>> e61648a (fix: dockerize backend and frontend)
# Networks to be created to facilitate communication between containers
networks:
  eureka-network:
    name: eureka-network
<<<<<<< HEAD
    driver: bridge
  frontend:  
=======
    driver: bridge
>>>>>>> e61648a (fix: dockerize backend and frontend)
