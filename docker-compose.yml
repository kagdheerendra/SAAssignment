# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)
version: '3'

# Define services
services:
  # App backend eurekaserver service
  eureka-server:
    container_name: eureka-server
    # Configuration for building the docker image for the backend service
    build:
      context: e-microservice\e-serviceregistry # Use an image built from the specified dockerfile in the `spring-boot-oauth2-social-login` directory.
      dockerfile: Dockerfile
    ports:
      - "8761:8761" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    environment:
      - spring.application.name=eureka-server
      - eureka.client.registerWithEureka=false
      - eureka.client.fetchRegistry=false
      - eureka.server.waitTimeInMsWhenSyncEmpty=0
    networks:
      - eureka-network
  # App backend apigateway service
  api-gateway:
    container_name: api-gateway
    # Configuration for building the docker image for the backend service
    build:
      context: e-microservice\e-ApiGateway # Use an image built from the specified dockerfile in the `spring-boot-oauth2-social-login` directory.
      dockerfile: Dockerfile
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    environment:
      - spring.application.name=api-gateway
      - eureka.instance.preferIpAddress=true
      - eureka.client.registerWithEureka=true
      - eureka.client.fetchRegistry=true
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka
    networks:
      - eureka-network
    depends_on:
      - eureka-server

  # App backend productservice service
  product-service:
    container_name: product-service
    # Configuration for building the docker image for the backend service
    build:
      context: e-microservice\e-ProductService # Use an image built from the specified dockerfile in the `spring-boot-oauth2-social-login` directory.
      dockerfile: Dockerfile
    ports:
      - "9081:9081"
    environment:
      - spring.application.name=product-service
      - eureka.instance.preferIpAddress=true
      - eureka.client.registerWithEureka=true
      - eureka.client.fetchRegistry=true
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka
      - spring.datasource.url = jdbc:mysql://mysql:3306/emicroservices?allowPublicKeyRetrieval=true&useSSL=false&createDatabaseIfNotExist=true
      - spring.datasource.username = root
      - spring.datasource.password = root
      - spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect
      - spring.jpa.hibernate.ddl-auto = update      
    restart: always
    networks:
      - eureka-network
    depends_on:
      - eureka-server
      
  # Frontend Service 
  angular-app:
    container_name: angular-app
    build:
      context: angular-app # Use an image built from the specified dockerfile in the `angular-11-social-login` directory.
      dockerfile: Dockerfile
    ports:
      - "4200:80" # Map the exposed port 80 on the container to port 8081 on the host machine
    restart: always
    depends_on:
      - api-gateway
    networks:
      - frontend  

  # Database Service (Mysql)
  mysql:
    container_name: mysql
    image: mysql:8.0
    ports:
      - "3307:3306"
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=root
    networks:
      - eureka-network  
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot"]
      interval: 30s
      timeout: 10s
      retries: 3
  
# Networks to be created to facilitate communication between containers
networks:
  eureka-network:
    name: eureka-network
    driver: bridge
  frontend:  